// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PerformanceTest_StreamData_FullMethodName  = "/grpcperformance.PerformanceTest/StreamData"
	PerformanceTest_Acknowledge_FullMethodName = "/grpcperformance.PerformanceTest/Acknowledge"
)

// PerformanceTestClient is the client API for PerformanceTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerformanceTestClient interface {
	StreamData(ctx context.Context, in *ClientID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Data], error)
	Acknowledge(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Empty, error)
}

type performanceTestClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceTestClient(cc grpc.ClientConnInterface) PerformanceTestClient {
	return &performanceTestClient{cc}
}

func (c *performanceTestClient) StreamData(ctx context.Context, in *ClientID, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Data], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PerformanceTest_ServiceDesc.Streams[0], PerformanceTest_StreamData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientID, Data]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerformanceTest_StreamDataClient = grpc.ServerStreamingClient[Data]

func (c *performanceTestClient) Acknowledge(ctx context.Context, in *Ack, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PerformanceTest_Acknowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceTestServer is the server API for PerformanceTest service.
// All implementations must embed UnimplementedPerformanceTestServer
// for forward compatibility.
type PerformanceTestServer interface {
	StreamData(*ClientID, grpc.ServerStreamingServer[Data]) error
	Acknowledge(context.Context, *Ack) (*Empty, error)
	mustEmbedUnimplementedPerformanceTestServer()
}

// UnimplementedPerformanceTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPerformanceTestServer struct{}

func (UnimplementedPerformanceTestServer) StreamData(*ClientID, grpc.ServerStreamingServer[Data]) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedPerformanceTestServer) Acknowledge(context.Context, *Ack) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acknowledge not implemented")
}
func (UnimplementedPerformanceTestServer) mustEmbedUnimplementedPerformanceTestServer() {}
func (UnimplementedPerformanceTestServer) testEmbeddedByValue()                         {}

// UnsafePerformanceTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceTestServer will
// result in compilation errors.
type UnsafePerformanceTestServer interface {
	mustEmbedUnimplementedPerformanceTestServer()
}

func RegisterPerformanceTestServer(s grpc.ServiceRegistrar, srv PerformanceTestServer) {
	// If the following call pancis, it indicates UnimplementedPerformanceTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PerformanceTest_ServiceDesc, srv)
}

func _PerformanceTest_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PerformanceTestServer).StreamData(m, &grpc.GenericServerStream[ClientID, Data]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PerformanceTest_StreamDataServer = grpc.ServerStreamingServer[Data]

func _PerformanceTest_Acknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceTestServer).Acknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceTest_Acknowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceTestServer).Acknowledge(ctx, req.(*Ack))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceTest_ServiceDesc is the grpc.ServiceDesc for PerformanceTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcperformance.PerformanceTest",
	HandlerType: (*PerformanceTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acknowledge",
			Handler:    _PerformanceTest_Acknowledge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _PerformanceTest_StreamData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
